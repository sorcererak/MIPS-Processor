// ----------------- Initial -------------------
        // address = 0;
        // //addi $16,$0,10
        // inst_data = 32'b000001_10000_00000_0000000000001010;
        // #40;

        // address = 2;
        // //addi $17,$0,5
        // inst_data = 32'b000001_10001_00000_0000000000000101;
        // #40

        // address = 3;
        // //addi $18,$16,$17
        // inst_data = 32'b000000_10010_10000_10001_00000000101;
        // #40;

        // address = 4;
        // //add $18,$18,$18
        // inst_data = 32'b000000_10010_10010_10010_00000000000;
        // #40;

        // address = 5;
        // //addi $18,$18,-1
        // inst_data = 32'b000001_10010_10010_1111111111111111;
        // #40;

        // address = 6;
        // //sub $18,$18,$17
        // inst_data = 32'b000000_10010_10010_10001_00000000101;
        // #40;

        // address = 7;
        // //mult $18,$18,$17
        // inst_data = 32'b000000_10010_10010_10001_00000_001100;
        // #40;

        // address = 8;
        // //lw $18,$0,0
        // inst_data = 32'b000111_10010_00000_0000000000000000;
        // #40;

        // address = 9;
        // //addi $18,$18,1
        // inst_data = 32'b000001_10010_10010_0000000000000001;
        // #40;

        // address = 10;
        // //sw $18,$0,0
        // inst_data = 32'b001000_00000_00000_10010_00000000000;
        // #40;

        // --------------- Initial close -------------------

        // --------------- Floating Point Operations -------------------
        
        // address = 0;
        // //lw $18,$0,0 - Load value from memory address 0 to register $18
        // inst_data = 32'b000111_10010_00000_0000000000000000;
        // #40;

        // address = 1;
        // //mtc1 $f1,$18 - Move value from $18 to floating point register $f1
        // inst_data = 32'b100001_00001_00000_10010_00000000000;
        // #40;

        // address = 2;
        // //lw $18,$0,1 - Load value from memory address 1 to register $18
        // inst_data = 32'b000111_10010_00000_0000000000000001;
        // #40;

        // address = 3;
        // //mtc1 $f2,$18 - Move value from $18 to floating point register $f2
        // inst_data = 32'b100001_00010_00000_10010_00000000000;
        // #40;

        // address = 4;
        // //add.s $f3,$f1,$f2 - Add the two floating point values and store in $f3
        // inst_data = 32'b100010_00011_00001_00010_00000000000;
        // #40;

        // address = 5;
        // //sub.s $f3,$f1,$f1 - Subtract $f2 from $f1 and store in $f3
        // inst_data = 32'b100011_00011_00001_00001_00000000000;
        // #40;

        // address = 6;
        // //c.lt.s cc,$f1,$f2 - Compare if $f1 < $f2, result goes to condition code register
        // inst_data = 32'b100110_00000_00001_00010_00000000000;
        // #40;

        // address = 7;
        // //c.eq.s - Compare if $f1 equals $f1 (should set cc to 1)
        // inst_data = 32'b100100_00000_00001_00001_00000000000;
        // #40;

        // address = 8;
        // //c.ge.s - Compare if $f1 is greater than or equal to $f2 (should set cc to 0 since 2.5 < 3.2)
        // inst_data = 32'b100111_00000_00001_00010_00000000000;
        // #40;

        // address = 9;
        // //mov.s cc $f3,$f1 - Move value from $f1 to $f3
        // inst_data = 32'b101001_00011_00001_00000_00000000000;
        // #40;

        // address = 10;
        // //mfc1 $19,$f3 - Move value from floating-point register $f3 to CPU register $19
        // inst_data = 32'b100000_10011_00000_00011_00000000000;
        // #40;

        // ---------------- Floating Point Operations complete -------------------

        // ---------------- Bache hue --------------------------------------------
        address = 0;
        //addi $1, $0, 5
        inst_data = 32'b000001_00001_00000_0000000000000101; // addi $1, $0, 5
        #40;

        address = 1;
        //addi $2, $0, 6
        inst_data = 32'b000001_00010_00000_0000000000000110; // addi $2, $0, 6
        #40;

        address = 2;
        //slt $3, $1, $2
        inst_data = 32'b000000_00011_00001_00010_00000_001000; // slt $3, $1, $2

        address = 3;
        //slti $3, $1, 10
        inst_data = 32'b001001_00011_00001_0000000000001010; // slti $3, $1, 10
        #40;

        address = 4;
        //seq $3, $1, 5
        inst_data = 32'b001010_00011_00001_0000000000000101; // seq $3, $1, 5
        #40;

        address = 5;
        //addi $4, $4, 7
        inst_data = 32'b000001_00100_00100_0000000000000111; // addi $4, $0, 7
        #40;

        address = 6;
        //j 5
        inst_data = 32'b011000_00000000000000000000000101; // j 5
        #40;

        address = 6;
        //beq $1, $1, 1
        inst_data = 32'b010000_00001_00000_00001_00000000001; // beq $1, $1, 1
        #40;

        address = 6;
        //bne $1, $2, 1
        inst_data = 32'b010001_00001_00000_00010_00000000001; // bne $1, $2, 1
        #40;

        address = 6;
        //bgt $2, $1, 1
        inst_data = 32'b010010_00010_00000_00001_00000000001; // bgt $2, $1, 1
        #40;

        address = 6;
        //bgte $2, $1, 1
        inst_data = 32'b010011_00010_00000_00001_00000000001; // bgte $2, $1, 1
        #40;

        address = 6;
        //ble $1, $2, 1
        inst_data = 32'b010100_00001_00000_00010_00000000001; // ble $1, $2, 1
        #40;

        address = 6;
        //bleq $1, $2, 1
        inst_data = 32'b010101_00001_00000_00010_00000000001; // bleq $1, $2, 1
        #40;

        address = 6;
        //addi $5, $5, 8
        inst_data = 32'b000001_00101_00101_0000000000001000; // addi $5, $5, 8
        #40;

        address = 7;
        //addi $5, $5, 8
        inst_data = 32'b000001_00101_00101_0000000000001000; // addi $5, $5, 8
        #40;

        address = 8;
        //sll $6, $5, 3
        inst_data = 32'b000000_00110_00101_00000_00011_001001; // sll $6, $5, 3
        #40;

        address = 9;
        //xori $6, $6, 10
        inst_data = 32'b000011_00110_00110_0000000000001010; // xori $6, $6, 10
        #40;

        address = 10;
        //ori $6, $6, 11
        inst_data = 32'b000011_00110_00110_0000000000001011; // ori $6, $6, 11
        #40;

// -------------------- Bache hue complete -----------------